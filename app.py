import streamlit as st
import tensorflow as tf
from tensorflow import keras
import numpy as np
from PIL import Image
import io
import os

# Set page configuration
st.set_page_config(
    page_title="AI vs Human Image Classifier",
    page_icon="ü§ñ",
    layout="centered"
)

# Custom CSS for styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-align: center;
    }
    .result-header {
        font-size: 1.8rem;
        font-weight: 600;
        margin: 1rem 0;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
    }
    .human-result {
        background-color: rgba(0, 128, 0, 0.2);
    }
    .ai-result {
        background-color: rgba(255, 165, 0, 0.2);
    }
    .confidence {
        font-weight: bold;
    }
    .image-container {
        display: flex;
        justify-content: center;
        margin: 2rem 0;
    }
    .stFooter {
        visibility: hidden;
    }
</style>
""", unsafe_allow_html=True)

# App title and introduction
st.markdown("<div class='main-header'>AI vs Human Image Detector</div>", unsafe_allow_html=True)
st.markdown("""
Upload an image, and our model will determine if it was generated by AI or created by a human.
The model analyzes visual patterns that may not be obvious to the human eye.
""")

# Function to load the model
@st.cache_resource
def load_model():
    """Load the pre-trained Keras model"""
    try:
        # Update this path to where your model is stored
        model_path = "model/ai_human_classifier.h5"
        model = keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

# Function to preprocess the image
def preprocess_image(image, target_size=(224, 224)):
    """Preprocess the image to be compatible with the model"""
    # Resize image
    image = image.resize(target_size)
    # Convert to array and normalize
    img_array = np.array(image) / 255.0
    # Add batch dimension
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Function to make prediction
def predict_image(model, img_array):
    """Make prediction using the model"""
    prediction = model.predict(img_array)
    # Assuming binary classification where 0=Human, 1=AI
    probability = prediction[0][0]
    return probability

# Main function
def main():
    # Load model
    model = load_model()
    
    if model is None:
        st.warning("‚ö†Ô∏è Model could not be loaded. Please check your model path or configuration.")
        return
    
    # Image upload
    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
    
    # Sample images option
    st.markdown("### Or try a sample image:")
    sample_col1, sample_col2 = st.columns(2)
    
    with sample_col1:
        if st.button("Sample Human Photo"):
            # Replace with path to your sample human image
            sample_img_path = "samples/human_sample.jpg"
            if os.path.exists(sample_img_path):
                with open(sample_img_path, "rb") as file:
                    uploaded_file = io.BytesIO(file.read())
            else:
                st.warning("Sample image not found. Please check the path.")
    
    with sample_col2:
        if st.button("Sample AI Photo"):
            # Replace with path to your sample AI image
            sample_img_path = "samples/ai_sample.jpg"
            if os.path.exists(sample_img_path):
                with open(sample_img_path, "rb") as file:
                    uploaded_file = io.BytesIO(file.read())
            else:
                st.warning("Sample image not found. Please check the path.")
    
    # Process the uploaded image
    if uploaded_file is not None:
        try:
            # Open and display the image
            image = Image.open(uploaded_file).convert("RGB")
            
            st.markdown("<div class='image-container'>", unsafe_allow_html=True)
            st.image(image, caption="Uploaded Image", width=400)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Add a spinner while processing
            with st.spinner("Analyzing image..."):
                # Preprocess the image
                processed_img = preprocess_image(image)
                
                # Make prediction
                probability = predict_image(model, processed_img)
                
                # Display result
                if probability > 0.5:
                    confidence = round(probability * 100, 2)
                    st.markdown(f"<div class='result-header ai-result'>AI-Generated <span class='confidence'>{confidence}%</span> confidence</div>", unsafe_allow_html=True)
                else:
                    confidence = round((1 - probability) * 100, 2)
                    st.markdown(f"<div class='result-header human-result'>Human-Generated <span class='confidence'>{confidence}%</span> confidence</div>", unsafe_allow_html=True)
                
                # Add explanation
                st.markdown("### How it works")
                st.write("""
                Our model analyzes various features in the image to determine if it was created by AI or a human. 
                AI-generated images often have subtle patterns, inconsistencies in details like hands, eyes, 
                or backgrounds, and other artifacts that the model has learned to recognize.
                """)
                
                # Disclaimer
                st.markdown("---")
                st.caption("""
                **Disclaimer**: While this model strives for accuracy, it may not be perfect. The rapidly evolving 
                field of AI image generation means new models may produce images that are increasingly difficult to distinguish.
                """)
                
        except Exception as e:
            st.error(f"Error processing image: {e}")

if __name__ == "__main__":
    main()
